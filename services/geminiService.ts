import { GoogleGenAI, Type } from "@google/genai";
import { Product } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

export const getPersonalizedSearchResults = async (query: string, products: Product[]): Promise<Product[]> => {
  const productListJson = JSON.stringify(products.map(({ id, name, category, description, demographic, productType }) => ({ id, name, category, description, demographic, productType })));

  const prompt = `
    You are an expert personal shopper for an e-commerce store specializing in Indian ethnic wear like sarees, suits, kurtas, and lehengas.
    A user is searching for "${query}".
    Based on this query, analyze the following list of clothing products and return a JSON array of the top 8 most relevant product IDs.
    Consider the product names, categories, descriptions, demographic (women, men, girl, boy), and productType (saree, suit, etc.). The user's query might be stylistic (e.g., "wedding wear for groom") or specific (e.g., "red silk saree").

    Product List:
    ${productListJson}

    Return a JSON object with a single key "productIds" which is an array of the most relevant product IDs from the list provided.
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            productIds: {
              type: Type.ARRAY,
              items: { type: Type.STRING }
            }
          }
        }
      }
    });

    const responseText = response.text.trim();
    const result = JSON.parse(responseText);

    if (result && Array.isArray(result.productIds)) {
      const rankedIds = result.productIds as string[];
      const rankedProducts = rankedIds
        .map(id => products.find(p => p.id === id))
        .filter((p): p is Product => p !== undefined);
      return rankedProducts;
    }
    
    return [];
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to fetch personalized search results.");
  }
};

export const generateProductImage = async (name: string, description: string): Promise<string> => {
  const prompt = `E-commerce product photography of a "${name}". ${description}. The product should be the main focus, elegantly displayed. Use a clean, minimalistic studio setting with a soft, neutral background (like light grey or off-white) to make the product stand out. The lighting should be professional and diffused, highlighting the texture and intricate details of the fabric without harsh shadows. The image should be photorealistic, high-resolution, and have a premium feel suitable for a luxury ethnic wear brand.`;
  
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '1:1',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    }
    
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error calling Gemini API for image generation:", error);
    throw new Error("Failed to generate product image. The API call may have failed or returned an empty response.");
  }
};